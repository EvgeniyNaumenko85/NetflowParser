package main

import (
	"NetflowParser/models"
	"NetflowParser/pkg"
	"NetflowParser/utilities"
	"fmt"
	"os"
	"runtime"
	"sync"
	"time"
)

func main() {
	//f, _ := os.Create("cpu.prof")
	//pprof.StartCPUProfile(f)
	//defer pprof.StopCPUProfile()

	// Принимаем флаги из консоли
	filePath, NetFlowRecord, InputFields := pkg.AcceptFlagsFromConsole()

	// Выбираем функцию для парсинга
	funcNumber, err := utilities.SelectParseFuncNumb(InputFields)
	if err != nil {
		fmt.Println(err)
		return
	}

	// Открытие файла в режиме чтения
	file, err := pkg.OpenFileByFilePath(filePath)
	if err != nil {
		fmt.Println("Ошибка при открытии файла:", err)
		return
	}
	defer file.Close()

	// Пропуск двоичного заголовка файла (349 байт)
	headerSize := 349
	err = pkg.OmittingFileBinHeader(headerSize, file)
	if err != nil {
		fmt.Println("Ошибка при перемещении указателя файла:", err)
		return
	}

	// Количество горутин для параллельной обработки
	numWorkers := runtime.NumCPU() * 100 //todo проверить оптимальное кол-во. горутин

	// Канал для передачи количества найденных записей между горутинами и главной функцией
	counterChan := make(chan uint64, numWorkers*10)

	// Ограничитель для дожидания завершения всех горутин
	var wg sync.WaitGroup
	wg.Add(numWorkers)

	// Запуск учета времени обработки файла
	startTime := time.Now()

	// Запускаем горутины-работники
	for i := 0; i < numWorkers; i++ {
		go processWorker(file, NetFlowRecord, &wg, counterChan, funcNumber)
	}

	// Дожидаемся завершения чтения файла
	wg.Wait()
	close(counterChan)

	endTime := time.Now()
	elapsedTime := endTime.Sub(startTime)

	fmt.Println("len counterChan: ", len(counterChan))

	// Создаем переменную для хранения общего количества найденных записей
	var counter uint64

	// Получаем общее количество найденных записей
	for val := range counterChan {
		counter += val
	}

	fmt.Printf("\nНайдено  записей: %d со значениями:\n \tsource = %s\n \tdestination = %s\n \taccount_id = %d\n \ttclass = %d\n",
		counter, NetFlowRecord.Source.String(), NetFlowRecord.Destination.String(),
		utilities.BytesToUint32LE(NetFlowRecord.AccountID), utilities.BytesToUint32LE(NetFlowRecord.TClass))
	fmt.Printf("Прочитано записей за время %s\n", elapsedTime)
}

func processWorker(file *os.File, NetFlowRecord models.NetFlowRecord, wg *sync.WaitGroup, counterChan chan<- uint64, funcNumber int) {
	defer wg.Done()
	var counter uint64
	recordSize := 74

	for {
		recordData := make([]byte, recordSize)
		n, err := file.Read(recordData)
		if err != nil {
			// Достигнут конец файла или произошла ошибка чтения
			break
		}
		if n == 0 {
			// Нет данных для чтения, выход из цикла
			break
		}

		record := pkg.ParseNetFlowRecord(recordData)

		// Обработка записи в зависимости от выбранной функции
		switch funcNumber {
		case 1:
			if record.Source.Equal(NetFlowRecord.Source) {
				counter++
			}
			// Добавьте обработку для других функций здесь (case 2, case 3 и т.д.)
		}
	}

	// Отправка общего количества найденных записей в канал
	counterChan <- counter
}
